/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList();
        if(root==null){
            return res;
        }
        HashMap<Integer, List<Integer>> map = new HashMap();
        Queue<TreeNode> nodes = new LinkedList();
        Queue<Integer> cols = new LinkedList();
        
        //initialize
        nodes.add(root);
        cols.add(0);
        int min = 0;
        int max = 0;
        
        //breadth first search
        while(!nodes.isEmpty()){
            TreeNode node = nodes.poll();
            int col = cols.poll();
            
            if(map.get(col)==null){
                List list = new ArrayList();
                list.add(node.val);
                map.put(col, list);
            }else{
                List list = map.get(col);
                list.add(node.val);
                map.put(col, list);
            }
            
            //left child
            if(node.left!=null){
                nodes.add(node.left);
                cols.add(col-1);
                min = Math.min(min, col-1);
            }
            
            //right child
            if(node.right!=null){
                nodes.add(node.right);
                cols.add(col+1);
                max = Math.max(max, col+1);
            }
        }
        
        for(int i=min; i<=max; i++){
            res.add(map.get(i));
        }
        
        return res;
    }
}
